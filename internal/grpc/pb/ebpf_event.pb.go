// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.26.1
// source: ebpf_event.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OpenEvent struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Pid             uint32                 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Uid             uint32                 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Comm            string                 `protobuf:"bytes,3,opt,name=comm,proto3" json:"comm,omitempty"`
	Filename        string                 `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`
	Flags           int32                  `protobuf:"varint,5,opt,name=flags,proto3" json:"flags,omitempty"`
	ReturnCode      int64                  `protobuf:"varint,6,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	TimestampNs     uint64                 `protobuf:"varint,7,opt,name=timestamp_ns,json=timestampNs,proto3" json:"timestamp_ns,omitempty"`
	TimestampNsExit uint64                 `protobuf:"varint,8,opt,name=timestamp_ns_exit,json=timestampNsExit,proto3" json:"timestamp_ns_exit,omitempty"`
	LatencyNs       uint64                 `protobuf:"varint,9,opt,name=latency_ns,json=latencyNs,proto3" json:"latency_ns,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *OpenEvent) Reset() {
	*x = OpenEvent{}
	mi := &file_ebpf_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenEvent) ProtoMessage() {}

func (x *OpenEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenEvent.ProtoReflect.Descriptor instead.
func (*OpenEvent) Descriptor() ([]byte, []int) {
	return file_ebpf_event_proto_rawDescGZIP(), []int{0}
}

func (x *OpenEvent) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *OpenEvent) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *OpenEvent) GetComm() string {
	if x != nil {
		return x.Comm
	}
	return ""
}

func (x *OpenEvent) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *OpenEvent) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *OpenEvent) GetReturnCode() int64 {
	if x != nil {
		return x.ReturnCode
	}
	return 0
}

func (x *OpenEvent) GetTimestampNs() uint64 {
	if x != nil {
		return x.TimestampNs
	}
	return 0
}

func (x *OpenEvent) GetTimestampNsExit() uint64 {
	if x != nil {
		return x.TimestampNsExit
	}
	return 0
}

func (x *OpenEvent) GetLatencyNs() uint64 {
	if x != nil {
		return x.LatencyNs
	}
	return 0
}

type ExecveEvent struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Pid             uint32                 `protobuf:"varint,10,opt,name=pid,proto3" json:"pid,omitempty"`
	Uid             uint32                 `protobuf:"varint,11,opt,name=uid,proto3" json:"uid,omitempty"`
	Comm            string                 `protobuf:"bytes,12,opt,name=comm,proto3" json:"comm,omitempty"`
	Filename        string                 `protobuf:"bytes,13,opt,name=filename,proto3" json:"filename,omitempty"`
	TimestampNsExit uint64                 `protobuf:"varint,14,opt,name=timestamp_ns_exit,json=timestampNsExit,proto3" json:"timestamp_ns_exit,omitempty"`
	ReturnCode      int64                  `protobuf:"varint,15,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	TimestampNs     uint64                 `protobuf:"varint,16,opt,name=timestamp_ns,json=timestampNs,proto3" json:"timestamp_ns,omitempty"`
	LatencyNs       uint64                 `protobuf:"varint,17,opt,name=latency_ns,json=latencyNs,proto3" json:"latency_ns,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ExecveEvent) Reset() {
	*x = ExecveEvent{}
	mi := &file_ebpf_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecveEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecveEvent) ProtoMessage() {}

func (x *ExecveEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecveEvent.ProtoReflect.Descriptor instead.
func (*ExecveEvent) Descriptor() ([]byte, []int) {
	return file_ebpf_event_proto_rawDescGZIP(), []int{1}
}

func (x *ExecveEvent) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ExecveEvent) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ExecveEvent) GetComm() string {
	if x != nil {
		return x.Comm
	}
	return ""
}

func (x *ExecveEvent) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ExecveEvent) GetTimestampNsExit() uint64 {
	if x != nil {
		return x.TimestampNsExit
	}
	return 0
}

func (x *ExecveEvent) GetReturnCode() int64 {
	if x != nil {
		return x.ReturnCode
	}
	return 0
}

func (x *ExecveEvent) GetTimestampNs() uint64 {
	if x != nil {
		return x.TimestampNs
	}
	return 0
}

func (x *ExecveEvent) GetLatencyNs() uint64 {
	if x != nil {
		return x.LatencyNs
	}
	return 0
}

type EbpfEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*EbpfEvent_OpenEvent
	//	*EbpfEvent_ExecveEvent
	Event         isEbpfEvent_Event `protobuf_oneof:"event"`
	NodeName      string            `protobuf:"bytes,20,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EbpfEvent) Reset() {
	*x = EbpfEvent{}
	mi := &file_ebpf_event_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EbpfEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EbpfEvent) ProtoMessage() {}

func (x *EbpfEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_event_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EbpfEvent.ProtoReflect.Descriptor instead.
func (*EbpfEvent) Descriptor() ([]byte, []int) {
	return file_ebpf_event_proto_rawDescGZIP(), []int{2}
}

func (x *EbpfEvent) GetEvent() isEbpfEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *EbpfEvent) GetOpenEvent() *OpenEvent {
	if x != nil {
		if x, ok := x.Event.(*EbpfEvent_OpenEvent); ok {
			return x.OpenEvent
		}
	}
	return nil
}

func (x *EbpfEvent) GetExecveEvent() *ExecveEvent {
	if x != nil {
		if x, ok := x.Event.(*EbpfEvent_ExecveEvent); ok {
			return x.ExecveEvent
		}
	}
	return nil
}

func (x *EbpfEvent) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type isEbpfEvent_Event interface {
	isEbpfEvent_Event()
}

type EbpfEvent_OpenEvent struct {
	OpenEvent *OpenEvent `protobuf:"bytes,18,opt,name=open_event,json=openEvent,proto3,oneof"`
}

type EbpfEvent_ExecveEvent struct {
	ExecveEvent *ExecveEvent `protobuf:"bytes,19,opt,name=execve_event,json=execveEvent,proto3,oneof"`
}

func (*EbpfEvent_OpenEvent) isEbpfEvent_Event() {}

func (*EbpfEvent_ExecveEvent) isEbpfEvent_Event() {}

type CollectorAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,21,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,22,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CollectorAck) Reset() {
	*x = CollectorAck{}
	mi := &file_ebpf_event_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectorAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorAck) ProtoMessage() {}

func (x *CollectorAck) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_event_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorAck.ProtoReflect.Descriptor instead.
func (*CollectorAck) Descriptor() ([]byte, []int) {
	return file_ebpf_event_proto_rawDescGZIP(), []int{3}
}

func (x *CollectorAck) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CollectorAck) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_ebpf_event_proto protoreflect.FileDescriptor

const file_ebpf_event_proto_rawDesc = "" +
	"\n" +
	"\x10ebpf_event.proto\x12\x02pb\"\x84\x02\n" +
	"\tOpenEvent\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\rR\x03pid\x12\x10\n" +
	"\x03uid\x18\x02 \x01(\rR\x03uid\x12\x12\n" +
	"\x04comm\x18\x03 \x01(\tR\x04comm\x12\x1a\n" +
	"\bfilename\x18\x04 \x01(\tR\bfilename\x12\x14\n" +
	"\x05flags\x18\x05 \x01(\x05R\x05flags\x12\x1f\n" +
	"\vreturn_code\x18\x06 \x01(\x03R\n" +
	"returnCode\x12!\n" +
	"\ftimestamp_ns\x18\a \x01(\x04R\vtimestampNs\x12*\n" +
	"\x11timestamp_ns_exit\x18\b \x01(\x04R\x0ftimestampNsExit\x12\x1d\n" +
	"\n" +
	"latency_ns\x18\t \x01(\x04R\tlatencyNs\"\xf0\x01\n" +
	"\vExecveEvent\x12\x10\n" +
	"\x03pid\x18\n" +
	" \x01(\rR\x03pid\x12\x10\n" +
	"\x03uid\x18\v \x01(\rR\x03uid\x12\x12\n" +
	"\x04comm\x18\f \x01(\tR\x04comm\x12\x1a\n" +
	"\bfilename\x18\r \x01(\tR\bfilename\x12*\n" +
	"\x11timestamp_ns_exit\x18\x0e \x01(\x04R\x0ftimestampNsExit\x12\x1f\n" +
	"\vreturn_code\x18\x0f \x01(\x03R\n" +
	"returnCode\x12!\n" +
	"\ftimestamp_ns\x18\x10 \x01(\x04R\vtimestampNs\x12\x1d\n" +
	"\n" +
	"latency_ns\x18\x11 \x01(\x04R\tlatencyNs\"\x97\x01\n" +
	"\tEbpfEvent\x12.\n" +
	"\n" +
	"open_event\x18\x12 \x01(\v2\r.pb.OpenEventH\x00R\topenEvent\x124\n" +
	"\fexecve_event\x18\x13 \x01(\v2\x0f.pb.ExecveEventH\x00R\vexecveEvent\x12\x1b\n" +
	"\tnode_name\x18\x14 \x01(\tR\bnodeNameB\a\n" +
	"\x05event\"@\n" +
	"\fCollectorAck\x12\x16\n" +
	"\x06status\x18\x15 \x01(\tR\x06status\x12\x18\n" +
	"\amessage\x18\x16 \x01(\tR\amessage2A\n" +
	"\x0eEventCollector\x12/\n" +
	"\n" +
	"SendEvents\x12\r.pb.EbpfEvent\x1a\x10.pb.CollectorAck(\x01B!Z\x1febpf_loader/internal/grpc/pb;pbb\x06proto3"

var (
	file_ebpf_event_proto_rawDescOnce sync.Once
	file_ebpf_event_proto_rawDescData []byte
)

func file_ebpf_event_proto_rawDescGZIP() []byte {
	file_ebpf_event_proto_rawDescOnce.Do(func() {
		file_ebpf_event_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ebpf_event_proto_rawDesc), len(file_ebpf_event_proto_rawDesc)))
	})
	return file_ebpf_event_proto_rawDescData
}

var file_ebpf_event_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ebpf_event_proto_goTypes = []any{
	(*OpenEvent)(nil),    // 0: pb.OpenEvent
	(*ExecveEvent)(nil),  // 1: pb.ExecveEvent
	(*EbpfEvent)(nil),    // 2: pb.EbpfEvent
	(*CollectorAck)(nil), // 3: pb.CollectorAck
}
var file_ebpf_event_proto_depIdxs = []int32{
	0, // 0: pb.EbpfEvent.open_event:type_name -> pb.OpenEvent
	1, // 1: pb.EbpfEvent.execve_event:type_name -> pb.ExecveEvent
	2, // 2: pb.EventCollector.SendEvents:input_type -> pb.EbpfEvent
	3, // 3: pb.EventCollector.SendEvents:output_type -> pb.CollectorAck
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_ebpf_event_proto_init() }
func file_ebpf_event_proto_init() {
	if File_ebpf_event_proto != nil {
		return
	}
	file_ebpf_event_proto_msgTypes[2].OneofWrappers = []any{
		(*EbpfEvent_OpenEvent)(nil),
		(*EbpfEvent_ExecveEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ebpf_event_proto_rawDesc), len(file_ebpf_event_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ebpf_event_proto_goTypes,
		DependencyIndexes: file_ebpf_event_proto_depIdxs,
		MessageInfos:      file_ebpf_event_proto_msgTypes,
	}.Build()
	File_ebpf_event_proto = out.File
	file_ebpf_event_proto_goTypes = nil
	file_ebpf_event_proto_depIdxs = nil
}
