// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.26.1
// source: ebpf_event.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EbpfEvent struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Pid                 uint32                 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Uid                 uint32                 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Comm                string                 `protobuf:"bytes,3,opt,name=comm,proto3" json:"comm,omitempty"`
	TimestampNs         uint64                 `protobuf:"varint,4,opt,name=timestamp_ns,json=timestampNs,proto3" json:"timestamp_ns,omitempty"`
	TimestampNsExit     uint64                 `protobuf:"varint,5,opt,name=timestamp_ns_exit,json=timestampNsExit,proto3" json:"timestamp_ns_exit,omitempty"`
	LatencyNs           uint64                 `protobuf:"varint,6,opt,name=latency_ns,json=latencyNs,proto3" json:"latency_ns,omitempty"`
	EventType           string                 `protobuf:"bytes,7,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	NodeName            string                 `protobuf:"bytes,8,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	User                string                 `protobuf:"bytes,9,opt,name=user,proto3" json:"user,omitempty"`
	Ppid                uint32                 `protobuf:"varint,10,opt,name=ppid,proto3" json:"ppid,omitempty"`
	Gid                 uint32                 `protobuf:"varint,11,opt,name=gid,proto3" json:"gid,omitempty"`
	CgroupId            uint64                 `protobuf:"varint,12,opt,name=cgroup_id,json=cgroupId,proto3" json:"cgroup_id,omitempty"`
	CgroupName          string                 `protobuf:"bytes,13,opt,name=cgroup_name,json=cgroupName,proto3" json:"cgroup_name,omitempty"`
	UserPid             uint32                 `protobuf:"varint,14,opt,name=user_pid,json=userPid,proto3" json:"user_pid,omitempty"`
	UserPpid            uint32                 `protobuf:"varint,15,opt,name=user_ppid,json=userPpid,proto3" json:"user_ppid,omitempty"`
	TimestampUnixMs     int64                  `protobuf:"varint,16,opt,name=timestamp_unix_ms,json=timestampUnixMs,proto3" json:"timestamp_unix_ms,omitempty"`
	ContainerId         string                 `protobuf:"bytes,17,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ContainerImage      string                 `protobuf:"bytes,18,opt,name=container_image,json=containerImage,proto3" json:"container_image,omitempty"`
	ContainerLabelsJson map[string]string      `protobuf:"bytes,19,rep,name=container_labels_json,json=containerLabelsJson,proto3" json:"container_labels_json,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Types that are valid to be assigned to Payload:
	//
	//	*EbpfEvent_Snoop
	//	*EbpfEvent_Network
	//	*EbpfEvent_Ptrace
	//	*EbpfEvent_Mmap
	//	*EbpfEvent_Mount
	//	*EbpfEvent_Resource
	Payload       isEbpfEvent_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EbpfEvent) Reset() {
	*x = EbpfEvent{}
	mi := &file_ebpf_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EbpfEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EbpfEvent) ProtoMessage() {}

func (x *EbpfEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EbpfEvent.ProtoReflect.Descriptor instead.
func (*EbpfEvent) Descriptor() ([]byte, []int) {
	return file_ebpf_event_proto_rawDescGZIP(), []int{0}
}

func (x *EbpfEvent) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *EbpfEvent) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *EbpfEvent) GetComm() string {
	if x != nil {
		return x.Comm
	}
	return ""
}

func (x *EbpfEvent) GetTimestampNs() uint64 {
	if x != nil {
		return x.TimestampNs
	}
	return 0
}

func (x *EbpfEvent) GetTimestampNsExit() uint64 {
	if x != nil {
		return x.TimestampNsExit
	}
	return 0
}

func (x *EbpfEvent) GetLatencyNs() uint64 {
	if x != nil {
		return x.LatencyNs
	}
	return 0
}

func (x *EbpfEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *EbpfEvent) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *EbpfEvent) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *EbpfEvent) GetPpid() uint32 {
	if x != nil {
		return x.Ppid
	}
	return 0
}

func (x *EbpfEvent) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *EbpfEvent) GetCgroupId() uint64 {
	if x != nil {
		return x.CgroupId
	}
	return 0
}

func (x *EbpfEvent) GetCgroupName() string {
	if x != nil {
		return x.CgroupName
	}
	return ""
}

func (x *EbpfEvent) GetUserPid() uint32 {
	if x != nil {
		return x.UserPid
	}
	return 0
}

func (x *EbpfEvent) GetUserPpid() uint32 {
	if x != nil {
		return x.UserPpid
	}
	return 0
}

func (x *EbpfEvent) GetTimestampUnixMs() int64 {
	if x != nil {
		return x.TimestampUnixMs
	}
	return 0
}

func (x *EbpfEvent) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *EbpfEvent) GetContainerImage() string {
	if x != nil {
		return x.ContainerImage
	}
	return ""
}

func (x *EbpfEvent) GetContainerLabelsJson() map[string]string {
	if x != nil {
		return x.ContainerLabelsJson
	}
	return nil
}

func (x *EbpfEvent) GetPayload() isEbpfEvent_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *EbpfEvent) GetSnoop() *SnooperEvent {
	if x != nil {
		if x, ok := x.Payload.(*EbpfEvent_Snoop); ok {
			return x.Snoop
		}
	}
	return nil
}

func (x *EbpfEvent) GetNetwork() *NetworkEvent {
	if x != nil {
		if x, ok := x.Payload.(*EbpfEvent_Network); ok {
			return x.Network
		}
	}
	return nil
}

func (x *EbpfEvent) GetPtrace() *PtraceEvent {
	if x != nil {
		if x, ok := x.Payload.(*EbpfEvent_Ptrace); ok {
			return x.Ptrace
		}
	}
	return nil
}

func (x *EbpfEvent) GetMmap() *MmapEvent {
	if x != nil {
		if x, ok := x.Payload.(*EbpfEvent_Mmap); ok {
			return x.Mmap
		}
	}
	return nil
}

func (x *EbpfEvent) GetMount() *MountEvent {
	if x != nil {
		if x, ok := x.Payload.(*EbpfEvent_Mount); ok {
			return x.Mount
		}
	}
	return nil
}

func (x *EbpfEvent) GetResource() *ResourceEvent {
	if x != nil {
		if x, ok := x.Payload.(*EbpfEvent_Resource); ok {
			return x.Resource
		}
	}
	return nil
}

type isEbpfEvent_Payload interface {
	isEbpfEvent_Payload()
}

type EbpfEvent_Snoop struct {
	Snoop *SnooperEvent `protobuf:"bytes,20,opt,name=snoop,proto3,oneof"`
}

type EbpfEvent_Network struct {
	Network *NetworkEvent `protobuf:"bytes,21,opt,name=network,proto3,oneof"`
}

type EbpfEvent_Ptrace struct {
	Ptrace *PtraceEvent `protobuf:"bytes,39,opt,name=ptrace,proto3,oneof"`
}

type EbpfEvent_Mmap struct {
	Mmap *MmapEvent `protobuf:"bytes,47,opt,name=mmap,proto3,oneof"`
}

type EbpfEvent_Mount struct {
	Mount *MountEvent `protobuf:"bytes,53,opt,name=mount,proto3,oneof"`
}

type EbpfEvent_Resource struct {
	Resource *ResourceEvent `protobuf:"bytes,62,opt,name=resource,proto3,oneof"`
}

func (*EbpfEvent_Snoop) isEbpfEvent_Payload() {}

func (*EbpfEvent_Network) isEbpfEvent_Payload() {}

func (*EbpfEvent_Ptrace) isEbpfEvent_Payload() {}

func (*EbpfEvent_Mmap) isEbpfEvent_Payload() {}

func (*EbpfEvent_Mount) isEbpfEvent_Payload() {}

func (*EbpfEvent_Resource) isEbpfEvent_Payload() {}

type SnooperEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,22,opt,name=filename,proto3" json:"filename,omitempty"`
	ReturnCode    int64                  `protobuf:"varint,23,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnooperEvent) Reset() {
	*x = SnooperEvent{}
	mi := &file_ebpf_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnooperEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnooperEvent) ProtoMessage() {}

func (x *SnooperEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnooperEvent.ProtoReflect.Descriptor instead.
func (*SnooperEvent) Descriptor() ([]byte, []int) {
	return file_ebpf_event_proto_rawDescGZIP(), []int{1}
}

func (x *SnooperEvent) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *SnooperEvent) GetReturnCode() int64 {
	if x != nil {
		return x.ReturnCode
	}
	return 0
}

type NetworkEvent struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ReturnCode     int64                  `protobuf:"varint,24,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	Saddrv4        string                 `protobuf:"bytes,25,opt,name=saddrv4,proto3" json:"saddrv4,omitempty"`                   // e.g., "192.168.1.100" or "::1"
	Daddrv4        string                 `protobuf:"bytes,26,opt,name=daddrv4,proto3" json:"daddrv4,omitempty"`                   // e.g., "8.8.8.8"
	Sport          string                 `protobuf:"bytes,27,opt,name=sport,proto3" json:"sport,omitempty"`                       // e.g., "443"
	Dport          string                 `protobuf:"bytes,28,opt,name=dport,proto3" json:"dport,omitempty"`                       // e.g., "12345"
	SaFamily       string                 `protobuf:"bytes,29,opt,name=sa_family,json=saFamily,proto3" json:"sa_family,omitempty"` // e.g., "AF_INET", "AF_INET6"
	Saddrv6        string                 `protobuf:"bytes,30,opt,name=saddrv6,proto3" json:"saddrv6,omitempty"`
	Daddrv6        string                 `protobuf:"bytes,31,opt,name=daddrv6,proto3" json:"daddrv6,omitempty"`
	ResolvedDomain string                 `protobuf:"bytes,32,opt,name=resolved_domain,json=resolvedDomain,proto3" json:"resolved_domain,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NetworkEvent) Reset() {
	*x = NetworkEvent{}
	mi := &file_ebpf_event_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkEvent) ProtoMessage() {}

func (x *NetworkEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_event_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkEvent.ProtoReflect.Descriptor instead.
func (*NetworkEvent) Descriptor() ([]byte, []int) {
	return file_ebpf_event_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkEvent) GetReturnCode() int64 {
	if x != nil {
		return x.ReturnCode
	}
	return 0
}

func (x *NetworkEvent) GetSaddrv4() string {
	if x != nil {
		return x.Saddrv4
	}
	return ""
}

func (x *NetworkEvent) GetDaddrv4() string {
	if x != nil {
		return x.Daddrv4
	}
	return ""
}

func (x *NetworkEvent) GetSport() string {
	if x != nil {
		return x.Sport
	}
	return ""
}

func (x *NetworkEvent) GetDport() string {
	if x != nil {
		return x.Dport
	}
	return ""
}

func (x *NetworkEvent) GetSaFamily() string {
	if x != nil {
		return x.SaFamily
	}
	return ""
}

func (x *NetworkEvent) GetSaddrv6() string {
	if x != nil {
		return x.Saddrv6
	}
	return ""
}

func (x *NetworkEvent) GetDaddrv6() string {
	if x != nil {
		return x.Daddrv6
	}
	return ""
}

func (x *NetworkEvent) GetResolvedDomain() string {
	if x != nil {
		return x.ResolvedDomain
	}
	return ""
}

type PtraceEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Request       int64                  `protobuf:"varint,33,opt,name=request,proto3" json:"request,omitempty"`
	TargetPid     int64                  `protobuf:"varint,34,opt,name=target_pid,json=targetPid,proto3" json:"target_pid,omitempty"`
	Addr          uint64                 `protobuf:"varint,35,opt,name=addr,proto3" json:"addr,omitempty"`
	Data          uint64                 `protobuf:"varint,36,opt,name=data,proto3" json:"data,omitempty"`
	ReturnCode    int64                  `protobuf:"varint,37,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	RequestName   string                 `protobuf:"bytes,38,opt,name=request_name,json=requestName,proto3" json:"request_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PtraceEvent) Reset() {
	*x = PtraceEvent{}
	mi := &file_ebpf_event_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PtraceEvent) ProtoMessage() {}

func (x *PtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_event_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PtraceEvent.ProtoReflect.Descriptor instead.
func (*PtraceEvent) Descriptor() ([]byte, []int) {
	return file_ebpf_event_proto_rawDescGZIP(), []int{3}
}

func (x *PtraceEvent) GetRequest() int64 {
	if x != nil {
		return x.Request
	}
	return 0
}

func (x *PtraceEvent) GetTargetPid() int64 {
	if x != nil {
		return x.TargetPid
	}
	return 0
}

func (x *PtraceEvent) GetAddr() uint64 {
	if x != nil {
		return x.Addr
	}
	return 0
}

func (x *PtraceEvent) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

func (x *PtraceEvent) GetReturnCode() int64 {
	if x != nil {
		return x.ReturnCode
	}
	return 0
}

func (x *PtraceEvent) GetRequestName() string {
	if x != nil {
		return x.RequestName
	}
	return ""
}

type MmapEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addr          uint64                 `protobuf:"varint,40,opt,name=addr,proto3" json:"addr,omitempty"`
	Len           uint64                 `protobuf:"varint,41,opt,name=len,proto3" json:"len,omitempty"`
	Prot          uint64                 `protobuf:"varint,42,opt,name=prot,proto3" json:"prot,omitempty"`
	Flags         uint64                 `protobuf:"varint,43,opt,name=flags,proto3" json:"flags,omitempty"`
	Fd            uint64                 `protobuf:"varint,44,opt,name=fd,proto3" json:"fd,omitempty"`
	Off           uint64                 `protobuf:"varint,45,opt,name=off,proto3" json:"off,omitempty"`
	ReturnCode    int64                  `protobuf:"varint,46,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MmapEvent) Reset() {
	*x = MmapEvent{}
	mi := &file_ebpf_event_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MmapEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmapEvent) ProtoMessage() {}

func (x *MmapEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_event_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmapEvent.ProtoReflect.Descriptor instead.
func (*MmapEvent) Descriptor() ([]byte, []int) {
	return file_ebpf_event_proto_rawDescGZIP(), []int{4}
}

func (x *MmapEvent) GetAddr() uint64 {
	if x != nil {
		return x.Addr
	}
	return 0
}

func (x *MmapEvent) GetLen() uint64 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *MmapEvent) GetProt() uint64 {
	if x != nil {
		return x.Prot
	}
	return 0
}

func (x *MmapEvent) GetFlags() uint64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *MmapEvent) GetFd() uint64 {
	if x != nil {
		return x.Fd
	}
	return 0
}

func (x *MmapEvent) GetOff() uint64 {
	if x != nil {
		return x.Off
	}
	return 0
}

func (x *MmapEvent) GetReturnCode() int64 {
	if x != nil {
		return x.ReturnCode
	}
	return 0
}

type MountEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DevName       string                 `protobuf:"bytes,48,opt,name=dev_name,json=devName,proto3" json:"dev_name,omitempty"`
	DirName       string                 `protobuf:"bytes,49,opt,name=dir_name,json=dirName,proto3" json:"dir_name,omitempty"`
	Type          string                 `protobuf:"bytes,50,opt,name=type,proto3" json:"type,omitempty"`
	Flags         uint64                 `protobuf:"varint,51,opt,name=flags,proto3" json:"flags,omitempty"`
	ReturnCode    int64                  `protobuf:"varint,52,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MountEvent) Reset() {
	*x = MountEvent{}
	mi := &file_ebpf_event_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountEvent) ProtoMessage() {}

func (x *MountEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_event_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountEvent.ProtoReflect.Descriptor instead.
func (*MountEvent) Descriptor() ([]byte, []int) {
	return file_ebpf_event_proto_rawDescGZIP(), []int{5}
}

func (x *MountEvent) GetDevName() string {
	if x != nil {
		return x.DevName
	}
	return ""
}

func (x *MountEvent) GetDirName() string {
	if x != nil {
		return x.DirName
	}
	return ""
}

func (x *MountEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MountEvent) GetFlags() uint64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *MountEvent) GetReturnCode() int64 {
	if x != nil {
		return x.ReturnCode
	}
	return 0
}

type ResourceEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CpuNs            uint64                 `protobuf:"varint,53,opt,name=CpuNs,proto3" json:"CpuNs,omitempty"`
	UserFaults       uint64                 `protobuf:"varint,54,opt,name=UserFaults,proto3" json:"UserFaults,omitempty"`
	KernelFaults     uint64                 `protobuf:"varint,55,opt,name=KernelFaults,proto3" json:"KernelFaults,omitempty"`
	VmMmapBytes      uint64                 `protobuf:"varint,56,opt,name=VmMmapBytes,proto3" json:"VmMmapBytes,omitempty"`
	VmMunmapBytes    uint64                 `protobuf:"varint,57,opt,name=VmMunmapBytes,proto3" json:"VmMunmapBytes,omitempty"`
	VmBrkGrowBytes   uint64                 `protobuf:"varint,58,opt,name=VmBrkGrowBytes,proto3" json:"VmBrkGrowBytes,omitempty"`
	VmBrkShrinkBytes uint64                 `protobuf:"varint,59,opt,name=VmBrkShrinkBytes,proto3" json:"VmBrkShrinkBytes,omitempty"`
	BytesWritten     uint64                 `protobuf:"varint,60,opt,name=BytesWritten,proto3" json:"BytesWritten,omitempty"`
	BytesRead        uint64                 `protobuf:"varint,61,opt,name=BytesRead,proto3" json:"BytesRead,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ResourceEvent) Reset() {
	*x = ResourceEvent{}
	mi := &file_ebpf_event_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceEvent) ProtoMessage() {}

func (x *ResourceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_event_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceEvent.ProtoReflect.Descriptor instead.
func (*ResourceEvent) Descriptor() ([]byte, []int) {
	return file_ebpf_event_proto_rawDescGZIP(), []int{6}
}

func (x *ResourceEvent) GetCpuNs() uint64 {
	if x != nil {
		return x.CpuNs
	}
	return 0
}

func (x *ResourceEvent) GetUserFaults() uint64 {
	if x != nil {
		return x.UserFaults
	}
	return 0
}

func (x *ResourceEvent) GetKernelFaults() uint64 {
	if x != nil {
		return x.KernelFaults
	}
	return 0
}

func (x *ResourceEvent) GetVmMmapBytes() uint64 {
	if x != nil {
		return x.VmMmapBytes
	}
	return 0
}

func (x *ResourceEvent) GetVmMunmapBytes() uint64 {
	if x != nil {
		return x.VmMunmapBytes
	}
	return 0
}

func (x *ResourceEvent) GetVmBrkGrowBytes() uint64 {
	if x != nil {
		return x.VmBrkGrowBytes
	}
	return 0
}

func (x *ResourceEvent) GetVmBrkShrinkBytes() uint64 {
	if x != nil {
		return x.VmBrkShrinkBytes
	}
	return 0
}

func (x *ResourceEvent) GetBytesWritten() uint64 {
	if x != nil {
		return x.BytesWritten
	}
	return 0
}

func (x *ResourceEvent) GetBytesRead() uint64 {
	if x != nil {
		return x.BytesRead
	}
	return 0
}

type CollectorAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,63,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,64,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CollectorAck) Reset() {
	*x = CollectorAck{}
	mi := &file_ebpf_event_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectorAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorAck) ProtoMessage() {}

func (x *CollectorAck) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_event_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorAck.ProtoReflect.Descriptor instead.
func (*CollectorAck) Descriptor() ([]byte, []int) {
	return file_ebpf_event_proto_rawDescGZIP(), []int{7}
}

func (x *CollectorAck) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CollectorAck) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_ebpf_event_proto protoreflect.FileDescriptor

const file_ebpf_event_proto_rawDesc = "" +
	"\n" +
	"\x10ebpf_event.proto\x12\x02pb\"\xc5\a\n" +
	"\tEbpfEvent\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\rR\x03pid\x12\x10\n" +
	"\x03uid\x18\x02 \x01(\rR\x03uid\x12\x12\n" +
	"\x04comm\x18\x03 \x01(\tR\x04comm\x12!\n" +
	"\ftimestamp_ns\x18\x04 \x01(\x04R\vtimestampNs\x12*\n" +
	"\x11timestamp_ns_exit\x18\x05 \x01(\x04R\x0ftimestampNsExit\x12\x1d\n" +
	"\n" +
	"latency_ns\x18\x06 \x01(\x04R\tlatencyNs\x12\x1d\n" +
	"\n" +
	"event_type\x18\a \x01(\tR\teventType\x12\x1b\n" +
	"\tnode_name\x18\b \x01(\tR\bnodeName\x12\x12\n" +
	"\x04user\x18\t \x01(\tR\x04user\x12\x12\n" +
	"\x04ppid\x18\n" +
	" \x01(\rR\x04ppid\x12\x10\n" +
	"\x03gid\x18\v \x01(\rR\x03gid\x12\x1b\n" +
	"\tcgroup_id\x18\f \x01(\x04R\bcgroupId\x12\x1f\n" +
	"\vcgroup_name\x18\r \x01(\tR\n" +
	"cgroupName\x12\x19\n" +
	"\buser_pid\x18\x0e \x01(\rR\auserPid\x12\x1b\n" +
	"\tuser_ppid\x18\x0f \x01(\rR\buserPpid\x12*\n" +
	"\x11timestamp_unix_ms\x18\x10 \x01(\x03R\x0ftimestampUnixMs\x12!\n" +
	"\fcontainer_id\x18\x11 \x01(\tR\vcontainerId\x12'\n" +
	"\x0fcontainer_image\x18\x12 \x01(\tR\x0econtainerImage\x12Z\n" +
	"\x15container_labels_json\x18\x13 \x03(\v2&.pb.EbpfEvent.ContainerLabelsJsonEntryR\x13containerLabelsJson\x12(\n" +
	"\x05snoop\x18\x14 \x01(\v2\x10.pb.SnooperEventH\x00R\x05snoop\x12,\n" +
	"\anetwork\x18\x15 \x01(\v2\x10.pb.NetworkEventH\x00R\anetwork\x12)\n" +
	"\x06ptrace\x18' \x01(\v2\x0f.pb.PtraceEventH\x00R\x06ptrace\x12#\n" +
	"\x04mmap\x18/ \x01(\v2\r.pb.MmapEventH\x00R\x04mmap\x12&\n" +
	"\x05mount\x185 \x01(\v2\x0e.pb.MountEventH\x00R\x05mount\x12/\n" +
	"\bresource\x18> \x01(\v2\x11.pb.ResourceEventH\x00R\bresource\x1aF\n" +
	"\x18ContainerLabelsJsonEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\t\n" +
	"\apayload\"K\n" +
	"\fSnooperEvent\x12\x1a\n" +
	"\bfilename\x18\x16 \x01(\tR\bfilename\x12\x1f\n" +
	"\vreturn_code\x18\x17 \x01(\x03R\n" +
	"returnCode\"\x89\x02\n" +
	"\fNetworkEvent\x12\x1f\n" +
	"\vreturn_code\x18\x18 \x01(\x03R\n" +
	"returnCode\x12\x18\n" +
	"\asaddrv4\x18\x19 \x01(\tR\asaddrv4\x12\x18\n" +
	"\adaddrv4\x18\x1a \x01(\tR\adaddrv4\x12\x14\n" +
	"\x05sport\x18\x1b \x01(\tR\x05sport\x12\x14\n" +
	"\x05dport\x18\x1c \x01(\tR\x05dport\x12\x1b\n" +
	"\tsa_family\x18\x1d \x01(\tR\bsaFamily\x12\x18\n" +
	"\asaddrv6\x18\x1e \x01(\tR\asaddrv6\x12\x18\n" +
	"\adaddrv6\x18\x1f \x01(\tR\adaddrv6\x12'\n" +
	"\x0fresolved_domain\x18  \x01(\tR\x0eresolvedDomain\"\xb2\x01\n" +
	"\vPtraceEvent\x12\x18\n" +
	"\arequest\x18! \x01(\x03R\arequest\x12\x1d\n" +
	"\n" +
	"target_pid\x18\" \x01(\x03R\ttargetPid\x12\x12\n" +
	"\x04addr\x18# \x01(\x04R\x04addr\x12\x12\n" +
	"\x04data\x18$ \x01(\x04R\x04data\x12\x1f\n" +
	"\vreturn_code\x18% \x01(\x03R\n" +
	"returnCode\x12!\n" +
	"\frequest_name\x18& \x01(\tR\vrequestName\"\x9e\x01\n" +
	"\tMmapEvent\x12\x12\n" +
	"\x04addr\x18( \x01(\x04R\x04addr\x12\x10\n" +
	"\x03len\x18) \x01(\x04R\x03len\x12\x12\n" +
	"\x04prot\x18* \x01(\x04R\x04prot\x12\x14\n" +
	"\x05flags\x18+ \x01(\x04R\x05flags\x12\x0e\n" +
	"\x02fd\x18, \x01(\x04R\x02fd\x12\x10\n" +
	"\x03off\x18- \x01(\x04R\x03off\x12\x1f\n" +
	"\vreturn_code\x18. \x01(\x03R\n" +
	"returnCode\"\x8d\x01\n" +
	"\n" +
	"MountEvent\x12\x19\n" +
	"\bdev_name\x180 \x01(\tR\adevName\x12\x19\n" +
	"\bdir_name\x181 \x01(\tR\adirName\x12\x12\n" +
	"\x04type\x182 \x01(\tR\x04type\x12\x14\n" +
	"\x05flags\x183 \x01(\x04R\x05flags\x12\x1f\n" +
	"\vreturn_code\x184 \x01(\x03R\n" +
	"returnCode\"\xc7\x02\n" +
	"\rResourceEvent\x12\x14\n" +
	"\x05CpuNs\x185 \x01(\x04R\x05CpuNs\x12\x1e\n" +
	"\n" +
	"UserFaults\x186 \x01(\x04R\n" +
	"UserFaults\x12\"\n" +
	"\fKernelFaults\x187 \x01(\x04R\fKernelFaults\x12 \n" +
	"\vVmMmapBytes\x188 \x01(\x04R\vVmMmapBytes\x12$\n" +
	"\rVmMunmapBytes\x189 \x01(\x04R\rVmMunmapBytes\x12&\n" +
	"\x0eVmBrkGrowBytes\x18: \x01(\x04R\x0eVmBrkGrowBytes\x12*\n" +
	"\x10VmBrkShrinkBytes\x18; \x01(\x04R\x10VmBrkShrinkBytes\x12\"\n" +
	"\fBytesWritten\x18< \x01(\x04R\fBytesWritten\x12\x1c\n" +
	"\tBytesRead\x18= \x01(\x04R\tBytesRead\"@\n" +
	"\fCollectorAck\x12\x16\n" +
	"\x06status\x18? \x01(\tR\x06status\x12\x18\n" +
	"\amessage\x18@ \x01(\tR\amessage2A\n" +
	"\x0eEventCollector\x12/\n" +
	"\n" +
	"SendEvents\x12\r.pb.EbpfEvent\x1a\x10.pb.CollectorAck(\x01B!Z\x1febpf_loader/internal/grpc/pb;pbb\x06proto3"

var (
	file_ebpf_event_proto_rawDescOnce sync.Once
	file_ebpf_event_proto_rawDescData []byte
)

func file_ebpf_event_proto_rawDescGZIP() []byte {
	file_ebpf_event_proto_rawDescOnce.Do(func() {
		file_ebpf_event_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ebpf_event_proto_rawDesc), len(file_ebpf_event_proto_rawDesc)))
	})
	return file_ebpf_event_proto_rawDescData
}

var file_ebpf_event_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_ebpf_event_proto_goTypes = []any{
	(*EbpfEvent)(nil),     // 0: pb.EbpfEvent
	(*SnooperEvent)(nil),  // 1: pb.SnooperEvent
	(*NetworkEvent)(nil),  // 2: pb.NetworkEvent
	(*PtraceEvent)(nil),   // 3: pb.PtraceEvent
	(*MmapEvent)(nil),     // 4: pb.MmapEvent
	(*MountEvent)(nil),    // 5: pb.MountEvent
	(*ResourceEvent)(nil), // 6: pb.ResourceEvent
	(*CollectorAck)(nil),  // 7: pb.CollectorAck
	nil,                   // 8: pb.EbpfEvent.ContainerLabelsJsonEntry
}
var file_ebpf_event_proto_depIdxs = []int32{
	8, // 0: pb.EbpfEvent.container_labels_json:type_name -> pb.EbpfEvent.ContainerLabelsJsonEntry
	1, // 1: pb.EbpfEvent.snoop:type_name -> pb.SnooperEvent
	2, // 2: pb.EbpfEvent.network:type_name -> pb.NetworkEvent
	3, // 3: pb.EbpfEvent.ptrace:type_name -> pb.PtraceEvent
	4, // 4: pb.EbpfEvent.mmap:type_name -> pb.MmapEvent
	5, // 5: pb.EbpfEvent.mount:type_name -> pb.MountEvent
	6, // 6: pb.EbpfEvent.resource:type_name -> pb.ResourceEvent
	0, // 7: pb.EventCollector.SendEvents:input_type -> pb.EbpfEvent
	7, // 8: pb.EventCollector.SendEvents:output_type -> pb.CollectorAck
	8, // [8:9] is the sub-list for method output_type
	7, // [7:8] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_ebpf_event_proto_init() }
func file_ebpf_event_proto_init() {
	if File_ebpf_event_proto != nil {
		return
	}
	file_ebpf_event_proto_msgTypes[0].OneofWrappers = []any{
		(*EbpfEvent_Snoop)(nil),
		(*EbpfEvent_Network)(nil),
		(*EbpfEvent_Ptrace)(nil),
		(*EbpfEvent_Mmap)(nil),
		(*EbpfEvent_Mount)(nil),
		(*EbpfEvent_Resource)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ebpf_event_proto_rawDesc), len(file_ebpf_event_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ebpf_event_proto_goTypes,
		DependencyIndexes: file_ebpf_event_proto_depIdxs,
		MessageInfos:      file_ebpf_event_proto_msgTypes,
	}.Build()
	File_ebpf_event_proto = out.File
	file_ebpf_event_proto_goTypes = nil
	file_ebpf_event_proto_depIdxs = nil
}
