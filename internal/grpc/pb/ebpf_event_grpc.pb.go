// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: ebpf_event.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventCollector_SendEvents_FullMethodName = "/pb.EventCollector/SendEvents"
	EventCollector_SendBatch_FullMethodName  = "/pb.EventCollector/SendBatch"
)

// EventCollectorClient is the client API for EventCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventCollectorClient interface {
	SendEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EbpfEvent, CollectorAck], error)
	SendBatch(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*CollectorAck, error)
}

type eventCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewEventCollectorClient(cc grpc.ClientConnInterface) EventCollectorClient {
	return &eventCollectorClient{cc}
}

func (c *eventCollectorClient) SendEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EbpfEvent, CollectorAck], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventCollector_ServiceDesc.Streams[0], EventCollector_SendEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EbpfEvent, CollectorAck]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventCollector_SendEventsClient = grpc.ClientStreamingClient[EbpfEvent, CollectorAck]

func (c *eventCollectorClient) SendBatch(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*CollectorAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectorAck)
	err := c.cc.Invoke(ctx, EventCollector_SendBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventCollectorServer is the server API for EventCollector service.
// All implementations must embed UnimplementedEventCollectorServer
// for forward compatibility.
type EventCollectorServer interface {
	SendEvents(grpc.ClientStreamingServer[EbpfEvent, CollectorAck]) error
	SendBatch(context.Context, *Batch) (*CollectorAck, error)
	mustEmbedUnimplementedEventCollectorServer()
}

// UnimplementedEventCollectorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventCollectorServer struct{}

func (UnimplementedEventCollectorServer) SendEvents(grpc.ClientStreamingServer[EbpfEvent, CollectorAck]) error {
	return status.Errorf(codes.Unimplemented, "method SendEvents not implemented")
}
func (UnimplementedEventCollectorServer) SendBatch(context.Context, *Batch) (*CollectorAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBatch not implemented")
}
func (UnimplementedEventCollectorServer) mustEmbedUnimplementedEventCollectorServer() {}
func (UnimplementedEventCollectorServer) testEmbeddedByValue()                        {}

// UnsafeEventCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventCollectorServer will
// result in compilation errors.
type UnsafeEventCollectorServer interface {
	mustEmbedUnimplementedEventCollectorServer()
}

func RegisterEventCollectorServer(s grpc.ServiceRegistrar, srv EventCollectorServer) {
	// If the following call pancis, it indicates UnimplementedEventCollectorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventCollector_ServiceDesc, srv)
}

func _EventCollector_SendEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventCollectorServer).SendEvents(&grpc.GenericServerStream[EbpfEvent, CollectorAck]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventCollector_SendEventsServer = grpc.ClientStreamingServer[EbpfEvent, CollectorAck]

func _EventCollector_SendBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventCollectorServer).SendBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventCollector_SendBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventCollectorServer).SendBatch(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

// EventCollector_ServiceDesc is the grpc.ServiceDesc for EventCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.EventCollector",
	HandlerType: (*EventCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendBatch",
			Handler:    _EventCollector_SendBatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendEvents",
			Handler:       _EventCollector_SendEvents_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "ebpf_event.proto",
}
